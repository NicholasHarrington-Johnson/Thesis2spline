splinef
xfor
splinef[1]
splinef[,1]
c(splinef[,1])
source('~/GitHub/Thesis2spline/function.R')
source('~/GitHub/Thesis2spline/function.R')
arimaspline(P,h=2)
splinefcwdiag(P,8,2)
source('~/GitHub/Thesis2spline/function.R')
splinefcwdiag(P,8,2)
rm(list=ls())
source('~/GitHub/Thesis2spline/packages.R')
source('~/GitHub/Thesis2spline/function.R')
phols <- fread("Public_Holidays_Scaled.csv")
phols <- readph(phols)
load("truncated_data.Rda")
source('~/GitHub/Thesis2spline/function.R')
arimaspline(tr[[1]],h=1)
source('~/GitHub/Thesis2spline/function.R')
arimaspline(tr[[1]],h=1)
splinefcwdiag(P,h=8,k=2)
splinefcwdiag(tr[[1]],h=8,k=2)
View(tr[[1]])
source('~/GitHub/Thesis2spline/function.R')
splinefcwdiag(tr[[1]],h=8,k=2)-tail(tr[[1]],n=8)
splinefcwdiag(tr[[2]],h=8,k=2)-tail(tr[[2]]$b_t0,n=8)
fpickup(tr[[2]],h=8)-tail(tr[[2]]$b_t0,n=8)
source('~/GitHub/Thesis2spline/function.R')
arimaphf(tr[[2]],h=8)-tail(tr[[2]]$b_t0,n=8)
arimaphf(tr[[2]],h=8)
arimaphf(tr[[2]],h=8)$mean-tail(tr[[2]]$b_t0,n=8)
source('~/GitHub/Thesis2spline/function.R')
mseevaluate(tr[[27]])
source('~/GitHub/Thesis2spline/function.R')
mseevaluate(tr[[27]])
source('~/GitHub/Thesis2spline/function.R')
mseevaluate(tr[[27]])
for(i in numr)
{
plotpub(tr[[i]],i)
}
numr <- c(1:30)[-17]
for(i in numr)
{
plotpub(tr[[i]],i)
}
mseevaluate(tr[[26]])
source('~/GitHub/Thesis2spline/function.R')
mseevaluate(tr[[26]])
P <- tr[[26]]
h <- 8
k <- 2
arimaspline(P,h,k)
tri <- P[1:(nrow(P)-h),]
# Estimating a cubic spline
totspline <- ns(P[,(h+1)],df=1+k)
# Removing the last h observations of the spline
totsplinex <- totspline[1:(nrow(totspline)-h),]
# Attaching time series properties to data
tri$pubd <- window(P$pubd,start=tsp(P$pubd)[1],end=(tsp(P$pubd)[2]-(h/365)),frequency=365)
totpeople <- tri$b_t0
tsp(totpeople) <- tsp(tri$pubd)
# Creating log of data with weekly frequency
logpeople <- ts(log(totpeople+1), start=1, frequency=7)
# X regressor public holiday dummies and spline variables
xdums <- cbind(totsplinex)
excludeph <- rep(TRUE,3)
if(sum(tri$pubny>0.5)){
xdums <- cbind(as.numeric(tri$pubny),xdums)
excludeph[3] <- FALSE
}
if(sum(tri$pubi>0.5)){
xdums <- cbind(as.numeric(tri$pubi),xdums)
excludeph[2] <- FALSE
}
if(sum(tri$pubd>0.5)){
xdums <- cbind(as.numeric(tri$pubd),xdums)
excludeph[1] <- FALSE
}
# Change public holiday dates to numeric
nphols <- as.numeric(as.timeDate(phols$Date))
# Create time series public holiday variable with appropriate dimensions
# Dimensions - 2011 - 2015
pholt <- as.numeric(seq(as.Date("2011-01-01"),as.Date("2015-12-31"),by="1 day"))
ispubh <- ts(pholt %in% phols, start=2011, frequency=365)
# Dimensions - start when y series ends
endw <- tail(time(totpeople),n=1)
## end window for remaining forecasts
enddata <- tail(time(P$pubd),n=1)
# Generating the forecasted public holiday dates
fispubh <- window(ispubh,start=endw[[1]]+(1/365),end=enddata)
# Public Holidays with suspected decreases
fpubd <- nphols[which(phols$Holiday=="1")]
fpubd <- ts(as.numeric(pholt %in% fpubd), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubd <- window(fpubd,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[1]==TRUE){
fpubd <- NULL
}
# Public Holidays with suspected increases
fpubi <- nphols[which(phols$Holiday=="2")]
fpubi <- ts(as.numeric(pholt %in% fpubi), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubi <- window(fpubi,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[2]==TRUE){
fpubi <- NULL
}
# New Years Eve - suspected increases
fpubny <- nphols[which(phols$Holiday=="3")]
fpubny <- ts(as.numeric(pholt %in% fpubny),start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubny <- window(fpubny,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[3]==TRUE){
fpubny <- NULL
}
# Spline Forecast Variable
splinef <- totspline[(nrow(totsplinex)+1):(nrow(totsplinex)+h),]
# Create matrix of public holidays for forecasting
if (h==1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]),c(splinef[3]))
}
} else if (h>1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]),c(splinef[1:h,3]))
}
}
sum(xdums)
dim(xdums)
head(xdums)
colSums(xdums)
auto.arima(logpeople,xreg=xdums)
?auto.arima
auto.arima(logpeople,xred=xdums[-3])
xdums <- xdums[-3]
head(xdums)
colSums(xdums)
dim(xdums)
if(sum(tri$pubny>0.5)){
xdums <- cbind(as.numeric(tri$pubny),xdums)
excludeph[3] <- FALSE
}
if(sum(tri$pubi>0.5)){
xdums <- cbind(as.numeric(tri$pubi),xdums)
excludeph[2] <- FALSE
}
if(sum(tri$pubd>0.5)){
xdums <- cbind(as.numeric(tri$pubd),xdums)
excludeph[1] <- FALSE
}
# Change public holiday dates to numeric
nphols <- as.numeric(as.timeDate(phols$Date))
# Create time series public holiday variable with appropriate dimensions
# Dimensions - 2011 - 2015
pholt <- as.numeric(seq(as.Date("2011-01-01"),as.Date("2015-12-31"),by="1 day"))
ispubh <- ts(pholt %in% phols, start=2011, frequency=365)
# Dimensions - start when y series ends
endw <- tail(time(totpeople),n=1)
## end window for remaining forecasts
enddata <- tail(time(P$pubd),n=1)
# Generating the forecasted public holiday dates
fispubh <- window(ispubh,start=endw[[1]]+(1/365),end=enddata)
# Public Holidays with suspected decreases
fpubd <- nphols[which(phols$Holiday=="1")]
fpubd <- ts(as.numeric(pholt %in% fpubd), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubd <- window(fpubd,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[1]==TRUE){
fpubd <- NULL
}
# Public Holidays with suspected increases
fpubi <- nphols[which(phols$Holiday=="2")]
fpubi <- ts(as.numeric(pholt %in% fpubi), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubi <- window(fpubi,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[2]==TRUE){
fpubi <- NULL
}
# New Years Eve - suspected increases
fpubny <- nphols[which(phols$Holiday=="3")]
fpubny <- ts(as.numeric(pholt %in% fpubny),start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubny <- window(fpubny,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[3]==TRUE){
fpubny <- NULL
}
# Spline Forecast Variable
splinef <- totspline[(nrow(totsplinex)+1):(nrow(totsplinex)+h),]
# Create matrix of public holidays for forecasting
if (h==1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]),c(splinef[3]))
}
} else if (h>1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]),c(splinef[1:h,3]))
}
}
dim(xdums)
colSums(xdums)
rm(xdums)
if(sum(tri$pubny>0.5)){
xdums <- cbind(as.numeric(tri$pubny),xdums)
excludeph[3] <- FALSE
}
if(sum(tri$pubi>0.5)){
xdums <- cbind(as.numeric(tri$pubi),xdums)
excludeph[2] <- FALSE
}
if(sum(tri$pubd>0.5)){
xdums <- cbind(as.numeric(tri$pubd),xdums)
excludeph[1] <- FALSE
}
# Change public holiday dates to numeric
nphols <- as.numeric(as.timeDate(phols$Date))
# Create time series public holiday variable with appropriate dimensions
# Dimensions - 2011 - 2015
pholt <- as.numeric(seq(as.Date("2011-01-01"),as.Date("2015-12-31"),by="1 day"))
ispubh <- ts(pholt %in% phols, start=2011, frequency=365)
# Dimensions - start when y series ends
endw <- tail(time(totpeople),n=1)
## end window for remaining forecasts
enddata <- tail(time(P$pubd),n=1)
# Generating the forecasted public holiday dates
fispubh <- window(ispubh,start=endw[[1]]+(1/365),end=enddata)
# Public Holidays with suspected decreases
fpubd <- nphols[which(phols$Holiday=="1")]
fpubd <- ts(as.numeric(pholt %in% fpubd), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubd <- window(fpubd,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[1]==TRUE){
fpubd <- NULL
}
# Public Holidays with suspected increases
fpubi <- nphols[which(phols$Holiday=="2")]
fpubi <- ts(as.numeric(pholt %in% fpubi), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubi <- window(fpubi,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[2]==TRUE){
fpubi <- NULL
}
# New Years Eve - suspected increases
fpubny <- nphols[which(phols$Holiday=="3")]
fpubny <- ts(as.numeric(pholt %in% fpubny),start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubny <- window(fpubny,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[3]==TRUE){
fpubny <- NULL
}
# Spline Forecast Variable
splinef <- totspline[(nrow(totsplinex)+1):(nrow(totsplinex)+h),]
# Create matrix of public holidays for forecasting
if (h==1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]),c(splinef[3]))
}
} else if (h>1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]),c(splinef[1:h,3]))
}
}
xdums <- cbind(totsplinex)
if(sum(tri$pubny>0.5)){
xdums <- cbind(as.numeric(tri$pubny),xdums)
excludeph[3] <- FALSE
}
if(sum(tri$pubi>0.5)){
xdums <- cbind(as.numeric(tri$pubi),xdums)
excludeph[2] <- FALSE
}
if(sum(tri$pubd>0.5)){
xdums <- cbind(as.numeric(tri$pubd),xdums)
excludeph[1] <- FALSE
}
# Change public holiday dates to numeric
nphols <- as.numeric(as.timeDate(phols$Date))
# Create time series public holiday variable with appropriate dimensions
# Dimensions - 2011 - 2015
pholt <- as.numeric(seq(as.Date("2011-01-01"),as.Date("2015-12-31"),by="1 day"))
ispubh <- ts(pholt %in% phols, start=2011, frequency=365)
# Dimensions - start when y series ends
endw <- tail(time(totpeople),n=1)
## end window for remaining forecasts
enddata <- tail(time(P$pubd),n=1)
# Generating the forecasted public holiday dates
fispubh <- window(ispubh,start=endw[[1]]+(1/365),end=enddata)
# Public Holidays with suspected decreases
fpubd <- nphols[which(phols$Holiday=="1")]
fpubd <- ts(as.numeric(pholt %in% fpubd), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubd <- window(fpubd,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[1]==TRUE){
fpubd <- NULL
}
# Public Holidays with suspected increases
fpubi <- nphols[which(phols$Holiday=="2")]
fpubi <- ts(as.numeric(pholt %in% fpubi), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubi <- window(fpubi,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[2]==TRUE){
fpubi <- NULL
}
# New Years Eve - suspected increases
fpubny <- nphols[which(phols$Holiday=="3")]
fpubny <- ts(as.numeric(pholt %in% fpubny),start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubny <- window(fpubny,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[3]==TRUE){
fpubny <- NULL
}
# Spline Forecast Variable
splinef <- totspline[(nrow(totsplinex)+1):(nrow(totsplinex)+h),]
# Create matrix of public holidays for forecasting
if (h==1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]),c(splinef[3]))
}
} else if (h>1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]),c(splinef[1:h,3]))
}
}
colSums(xdums)
xdums[3]<-NULL
xdums[3]<-list(NULL)
colSums(xdums)
rm(xdums)
# X regressor public holiday dummies and spline variables
xdums <- cbind(totsplinex)
excludeph <- rep(TRUE,3)
if(sum(tri$pubny>0.5)){
xdums <- cbind(as.numeric(tri$pubny),xdums)
excludeph[3] <- FALSE
}
if(sum(tri$pubi>0.5)){
xdums <- cbind(as.numeric(tri$pubi),xdums)
excludeph[2] <- FALSE
}
if(sum(tri$pubd>0.5)){
xdums <- cbind(as.numeric(tri$pubd),xdums)
excludeph[1] <- FALSE
}
# Change public holiday dates to numeric
nphols <- as.numeric(as.timeDate(phols$Date))
# Create time series public holiday variable with appropriate dimensions
# Dimensions - 2011 - 2015
pholt <- as.numeric(seq(as.Date("2011-01-01"),as.Date("2015-12-31"),by="1 day"))
ispubh <- ts(pholt %in% phols, start=2011, frequency=365)
# Dimensions - start when y series ends
endw <- tail(time(totpeople),n=1)
## end window for remaining forecasts
enddata <- tail(time(P$pubd),n=1)
# Generating the forecasted public holiday dates
fispubh <- window(ispubh,start=endw[[1]]+(1/365),end=enddata)
# Public Holidays with suspected decreases
fpubd <- nphols[which(phols$Holiday=="1")]
fpubd <- ts(as.numeric(pholt %in% fpubd), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubd <- window(fpubd,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[1]==TRUE){
fpubd <- NULL
}
# Public Holidays with suspected increases
fpubi <- nphols[which(phols$Holiday=="2")]
fpubi <- ts(as.numeric(pholt %in% fpubi), start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubi <- window(fpubi,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[2]==TRUE){
fpubi <- NULL
}
# New Years Eve - suspected increases
fpubny <- nphols[which(phols$Holiday=="3")]
fpubny <- ts(as.numeric(pholt %in% fpubny),start=2011,frequency = 365)
# Begin at end[[1]] of y series
fpubny <- window(fpubny,start=endw[[1]]+(1/365),end=enddata)
# Exclude from forecast if omitted from regression
if (excludeph[3]==TRUE){
fpubny <- NULL
}
# Spline Forecast Variable
splinef <- totspline[(nrow(totsplinex)+1):(nrow(totsplinex)+h),]
# Create matrix of public holidays for forecasting
if (h==1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1]),c(splinef[2]),c(splinef[3]))
}
} else if (h>1){
if (k==1){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]))
} else if (k==2){
xfor <- cbind(as.numeric(fpubd),as.numeric(fpubi),as.numeric(fpubny),c(splinef[1:h,1]),c(splinef[1:h,2]),c(splinef[1:h,3]))
}
}
dat <- xdums[,-3]
colSums(dat)
auto.arima(logpeople,xreg=dat)
tail(P)
tail(xdums)
auto.arima(logpeople)
tail(dat)
auto.arima(logpeople,xreg=dat[,2:5])
auto.arima(logpeople,xreg=xdums[,1:3])
plot(xdums[,4])
plot(xdums[,5])
plot(xdums[,6])
plot(ts(xdums[,6]))
plot(ts(xdums[,5]))
plot(ts(xdums[,4]))
?ls
?lm
lm(xdums[,4]~xdums[,5:6])
splrg <- lm(xdums[,4]~xdums[,5:6])
summary.lm(splrg)
head(xumds[,4]-xdums[,5])
head(xdums[,4]-xdums[,5])
auto.arima(logpeople,xdums[,4:6])
auto.arima(logpeople,xreg=xdums[,4:6])
head(P)
source('~/GitHub/Thesis2spline/packages.R')
P <- tr[[26]]
logpeople <- log(P$b_t0+1)
xmat <- ns(P$b_t7,df=3)
head(xmat)
auto.arima(logpeople,xreg=xmat)
colSumsxmat
colSums(xmat)
xmat[2]/xmat[1]
xmat[,2]/xmat[,1]
xmat[,3]/xmat[,2]
xmat[,3]/xmat[,1]
plot(xmat[,1])
plot(xmat[,2])
plot(xmat[,3])
source('~/GitHub/Thesis2spline/packages.R')
auto.arima(logpeople,xreg=xmat)
lbt_7 <- log(tr[[26]]$b_t7 +1)
xmatl <- ns(lbt_7,df=3)
auto.arima(logpeople,xreg=xmatl)
ls(xmat[,1]~xmat[,2:3])
ls(xmat[,1],xmat[,2:3])
?ls
lm(xmat[,1]~xmat[,2:3])
lm(xmat[,1],xmat[,2:3])
?lm
summary.lm(xmat[,1]~xmat[,2:3])
lm(xmat[,1],xmat[,2:3])
lm(xmat[,1]~xmat[,2:3])
lm(xmat[,1]~0+xmat[,2:3])
plot(xmatl[,1])
plot(xmatl[,2])
plot(xmatl[,3])
auto.arima(logpeople,xreg=xmat)
head(xmat)
head(logpeople)
plot(logpeople)
pairs(xmat)
lm(logpeople ~ xmat)
summary(lm(logpeople ~ xmat))
View(tr[[26]])
plot(tr[[26]][,8])
x = tr[[26]][,8]
x2 <- ns(x,df=3)
head(x2)
head(xmat)
x2 <- ns(x, knots=quantile(x[x>0], prob=(1:3)/(3+1)))
summary(lm(logpeople ~ x2))
auto.arima(c(logpeople, rep(NA,1)))
auto.arima(c(logpeople, rep(NA,10)))
auto.arima(c(logpeople[-1], rep(NA,1)), xreg=x)
auto.arima(c(logpeople[-(1:10)], rep(NA,10)), xreg=x)
forecast(auto.arima(c(logpeople[-(1:10)], rep(NA,10)), xreg=x),xreg=3)
forecast(auto.arima(c(logpeople[-(1:10)], rep(NA,10)), xreg=x),xreg=NA)
setwd("C:/Users/Nicholas/Downloads/proposal-master/proposal-master/data")
source('C:/Users/Nicholas/Downloads/proposal-master/proposal-master/data/alc_data_script.R')
data_collect()
install.packages("twitteR")
data_collect()
install.packages("RSQLite")
data_collect()
